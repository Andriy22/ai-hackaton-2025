// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  VALIDATOR
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  role          UserRole       @default(ORG_ADMIN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([organizationId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Organization {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  employees Employee[]
}

model Employee {
  id             String        @id @default(uuid())
  firstName      String
  lastName       String
  birthDate      DateTime
  position       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  images         RetinaImage[]

  @@index([organizationId])
}

model RetinaImage {
  id          String    @id @default(uuid())
  path        String
  features    Float[]   // Storing array of numbers as Float[]
  documentId  String?   // Cosmos DB document ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String

  @@index([employeeId])
}
